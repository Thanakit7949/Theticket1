import React, { useEffect, useState } from "react";
import { Box, Button, Typography } from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import CheckIcon from "@mui/icons-material/Check";
import CloseIcon from "@mui/icons-material/Close";

const SeatConcert: React.FC = () => {
  const location = useLocation();
  const { price, label } = location.state || {}; // รับข้อมูลทั้งราคาและชื่อโซน (label)
  const [selectedSeats, setSelectedSeats] = useState<
    { row: number; col: number }[]
  >([]); // เปลี่ยนให้เป็น array เพื่อเก็บหลายที่นั่ง
  const [timeLeft, setTimeLeft] = useState(5 * 60); // ตัวแปรเวลาที่เหลือในการทำรายการ 5 นาที (5 * 60 วินาที)
  const concert_Zone = location.state;
  


   useEffect(() => {
      if (!location.state) {
        console.log("ไม่มีข้อมูล state ที่ถูกส่งมา");
      } else {
        console.log("concert_Zone:", concert_Zone);
      }
    }, [location.state, concert_Zone]);

    useEffect(() => {
      if (concert_Zone) {
        fetch(`http://localhost:5000/api/seats/${concert_Zone.id}`)
          .then((response) => response.json())
          .then((data) => {
            // ปรับสถานะที่นั่งใน React ให้ตรงกับข้อมูลที่ได้จากฐานข้อมูล
            const seatStatuses = data.map((seat: any) => seat.is_reserved ? 'reserved' : 'available');
            setSeats(seatStatuses); // แสดงที่นั่งที่ดึงมาจากฐานข้อมูล
          })
          .catch((error) => console.error('Error fetching seats:', error));
      }
    }, [concert_Zone]);
    
    
    const toggleSeatStatus = (index: number) => {
      const seat = seats[index];
      const newStatus = seat === "available" ? "selected" : "available";
      
      fetch("http://localhost:5000/api/update-seat", {
        method: "POST",  // ใช้เมธอด POST ในการส่งข้อมูลไปยังเซิร์ฟเวอร์
        headers: {
          "Content-Type": "application/json",  // กำหนด Content-Type เป็น JSON
        },
        body: JSON.stringify({
          seatId: index,  // อาจจะต้องส่ง ID ของที่นั่งจริงๆ ไม่ใช่แค่ index
          status: newStatus,
        }),
      })
        .then((response) => response.json())
        .then(() => {
          // อัพเดตสถานะที่นั่งใน state หลังจากที่อัพเดตสำเร็จ
          setSeats((prevSeats) =>
            prevSeats.map((seat, i) => (i === index ? newStatus : seat))
          );
        })
        .catch((error) => console.error("Error updating seat:", error));
    };
    
  // แปลง price จาก string เช่น "฿2,500" ให้เป็นตัวเลข
  const numericPrice = parseFloat(price.replace(/[^\d.-]/g, "")); //จะลบอักขระที่ไม่ใช่ตัวเลขหรือเครื่องหมายจุดทศนิยมออก (เช่น "฿", ",", เป็นต้น)

  // สถานะที่นั่ง
  const [seats, setSeats] = useState(
    Array(10).fill(Array(10).fill("available")) // สร้างแผนที่ที่นั่งขนาด 10x10 เริ่มต้นให้ที่นั่งทั้งหมดเป็นสถานะ "ว่าง" (available)
  );

  // อัปเดตตัวจับเวลาให้ทำงานทุก ๆ 1 วินาที
  useEffect(() => {
    const interval = setInterval(() => {
      setTimeLeft((prevTime) => (prevTime > 0 ? prevTime - 1 : 0)); // ลดเวลาลงทีละ 1 วินาทีจนกว่าจะถึง 0
    }, 1000);

    return () => clearInterval(interval); // ล้าง interval เมื่อคอมโพเนนต์ถูกยกเลิก
  }, []);

  // ฟังก์ชันสำหรับฟอร์แมตเวลาเป็นรูปแบบ MM:SS
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(
      2,
      "0"
    )}`;
  };

  // ฟังก์ชันสำหรับเปลี่ยนสถานะของที่นั่งเมื่อมีการคลิก
  // const toggleSeatStatus = (rowIndex: number, colIndex: number) => {
  //   const seatPosition = { row: rowIndex + 1, col: colIndex + 1 };
  // console.log("selectedSeats",selectedSeats)
  // console.log("seats",seats)
  //   setSeats((prevSeats) =>
  //     prevSeats.map((row, rIndex) =>
  //       row.map((seat: string, cIndex: number) => {
  //         if (rIndex === rowIndex && cIndex === colIndex) {
  //           if (seat === "available") {
  //             setSelectedSeats((prevSelectedSeats) =>
  //               prevSelectedSeats.some(
  //                 (selectedSeat) =>
  //                   selectedSeat.row === seatPosition.row &&
  //                   selectedSeat.col === seatPosition.col
  //               )
  //                 ? prevSelectedSeats
  //                 : [...prevSelectedSeats, seatPosition]
  //             ); // เพิ่มที่นั่งใหม่ ถ้าไม่มีใน `selectedSeats`
  //             return "selected";
  //           } else if (seat === "selected") {
  //             setSelectedSeats((prevSelectedSeats) =>
  //               prevSelectedSeats.filter(
  //                 (selectedSeat) =>
  //                   !(
  //                     selectedSeat.row === seatPosition.row &&
  //                     selectedSeat.col === seatPosition.col
  //                   )
  //               )
  //             ); // ลบที่นั่งที่เลือกออกจาก `selectedSeats`
  //             return "available";
  //           }
  //         }
  //         return seat;
  //       })
  //     )
  //   );
  // };
  
  const navigate = useNavigate(); // เรียกใช้ useNavigate
    // ฟังก์ชันสำหรับการไปที่หน้า Payment
    const handleBuyTicket = () => {
      navigate("payment-concert", {
        state: {
          price,
          label,
          selectedSeats,
        },
      });
    };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "row",
        alignItems: "flex-start",
        background: "linear-gradient(135deg, #EECDA3 0%, #EF629F 100%);",
        height:"800px",
        padding: "20px",
        maxHeight:"none",
        width: "1150px",
        maxWidth: "none",
      }}
    >
      {/* Sidebar ซ้าย */}
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "flex-start",
          width: "505px",
          mr: 2,
        }}
      >
        <Box
          sx={{
            padding: "20px",
            backgroundColor: "#f5f5f5",
            borderRadius: "8px",
            boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
          }}
        >
          <Typography
            variant="h4"
            sx={{ marginBottom: "20px", fontWeight: "bold", fontSize: "25px" }}
          >
            {" "}
            รายละเอียดการจองโซนที่นั่ง: {label}{" "}
          </Typography>
          <Typography
            variant="h6"
            sx={{ marginBottom: "10px", textAlign: "left", color: "red" }}
          >
            {" "}
            บัตรโซนที่นั่งราคา: {price} บาท{" "}
          </Typography>

          {/* แสดงโซนเมื่อเลือกที่นั่ง */}
          {selectedSeats.length > 0 && (
            <Typography
              variant="h6"
              sx={{
                color: "black",
                mb: 2,
                display: "flex",
                alignItems: "center",
                gap: "10px",
              }}
            >
              โซน:
              <Box
                sx={{
                  width: "50px",
                  height: "50px",
                  borderRadius: "50%",
                  backgroundColor: "#b39ddb",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  color: "black",
                  fontWeight: "bold",
                  fontSize: "15px",
                }}
              >
                {" "}
                {label}{" "}
              </Box>
            </Typography>
          )}

          {/* แสดงที่นั่งที่เลือก */}
          {selectedSeats.length > 0 && (
           <Box
           sx={{
             display: "flex",
             flexDirection: "row",
             flexWrap: "wrap",
             gap: "10px",
             maxHeight: "150px", // กำหนดความสูงสูงสุด
             overflowY: "auto", // เพิ่ม Scrollbar เมื่อรายการเกินพื้นที่
             padding: "10px",
             backgroundColor: "#fff",
             borderRadius: "8px",
             boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
           }}
         >
            ที่นั่ง:
            {selectedSeats.map((seat, index) => (
              <Box
        key={index}
        sx={{
          width: "50px",
          height: "50px",
          borderRadius: "50%",
          backgroundColor: "#00FF00",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          color: "black",
          fontWeight: "bold",
          fontSize: "14px",
        }}
      >
        {`${label}${seat.row}-${seat.col}`}
      </Box>
    ))}
  </Box>
)}

          {/* แสดงราคา */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mt: 22,
              padding: "12px 16px",
              borderRadius: "30px",
              boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.1)",
              backgroundColor: "#ffffff",
            }}
          >
            <Typography variant="body1" fontWeight="bold" color="black">
              {selectedSeats.length > 0
                ? `ราคารวม: ฿${numericPrice * selectedSeats.length}`
                : "กรุณาเลือกที่นั่ง"}
            </Typography>

            <Button
              variant="contained"
              sx={{
                backgroundColor: "red",
                color: "white",
                padding: "8px 16px",
                borderRadius: "30px",
                fontWeight: "bold",
                "&:hover": { backgroundColor: "darkred" },
              }}
              onClick={handleBuyTicket}
              disabled={selectedSeats.length === 0}
            >
              {" "}
              ยืนยันการจองที่นั่ง{" "}
            </Button>
          </Box>
        </Box>
      </Box>

      {/* แผนที่ที่นั่ง */}
      <Box
        sx={{
          width: "740px",
          maxWidth: "none",
          padding: "20px",
          borderRadius: "20px",
          backgroundColor: "#FFF",
          boxShadow: "0px 4px 12px rgba(0, 0, 0, 0.2)",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
        }}
      >
        <Typography variant="h6" sx={{ color: "black", mb: 2 }}>
          {" "}
          เวลาที่ทำรายการ:{" "}
          <span style={{ color: "red", fontWeight: "bold" }}>
            {" "}
            {formatTime(timeLeft)}{" "}
          </span>{" "}
        </Typography>
 {/* ตำนานสถานะที่นั่ง */}
 <Box
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            gap: "20px",
            mt: 2,
          }}
        >
          {/* ที่นั่งว่าง */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              gap: "20px",
              mt: 2,
            }}
          >
            {/* ที่นั่งว่าง */}
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                textAlign: "center",
              }}
            >
              <Box
                sx={{
                  width: "30px",
                  height: "30px",
                  backgroundColor: "#00AEEF",
                  borderRadius: "5px",
                  mr: "15px",
                }}
              />
              <Typography variant="body2" sx={{ color: "black", mt: 1, mr: 2 }}>
                ที่นั่งว่าง
              </Typography>
            </Box>

            {/* ที่นั่งที่เลือก */}
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                textAlign: "center",
              }}
            >
              <Box
                sx={{
                  width: "30px",
                  height: "30px",
                  backgroundColor: "#00FF00",
                  borderRadius: "5px",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <CheckIcon style={{ color: "black", fontSize: "20px" }} />{" "}
                {/* ใส่ไอคอนเครื่องหมายถูก */}
              </Box>
              <Typography variant="body2" sx={{ color: "black", mt: 1 }}>
                ที่นั่งที่เลือก
              </Typography>
            </Box>

            {/* ที่นั่งถูกจองแล้ว */}
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                textAlign: "center",
              }}
            >
              <Box
                sx={{
                  width: "30px",
                  height: "30px",
                  backgroundColor: "#C0C0C0",
                  borderRadius: "5px",
                }}
              />
              <Typography variant="body2" sx={{ color: "black", mt: 1 }}>
                ที่นั่งถูกจองแล้ว
              </Typography>
            </Box>

            {/* ที่นั่งที่ชำระเงินแล้ว */}
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                textAlign: "center",
              }}
            >
              <Box
                sx={{
                  width: "30px",
                  height: "30px",
                  backgroundColor: "#C0C0C0",
                  borderRadius: "5px",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <CloseIcon style={{ color: "red" }} />
              </Box>
              <Typography variant="body2" sx={{ color: "black", mt: 1 }}>
                ที่นั่งที่ชำระเงินแล้ว
              </Typography>
            </Box>
          </Box>
        </Box>
        <Typography
          variant="h4"
          fontWeight="bold"
          sx={{
            backgroundColor: "#f48fb1",
            color: "black",
            padding: "20px",
            width: "90%",
            maxWidth: "none",
            minHeight: "100px",
            textAlign: "center",
            lineHeight: "2.5",
            border: "3px solid black",
            mt: 3
          }}
        >
          STAGE
        </Typography>
        <Box
          sx={{
            display: "grid",
            gridTemplateColumns: "repeat(10, 40px)",
            gap: "10px",
            mt: 3,
          }}
        >
          {seats.map((row, rowIndex) =>
            row.map((seat: string, colIndex: number) => (
              <Box
                key={`${rowIndex}-${colIndex}`}
                onClick={() => toggleSeatStatus(rowIndex, colIndex)}
                sx={{
                  width: "30px",
                  height: "30px",
                  borderRadius: "5px",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  backgroundColor:
                    seat === "available"
                      ? "#00AEEF"
                      : seat === "selected"
                      ? "#00FF00"
                      : "#C0C0C0",
                  cursor:
                    seat === "available" || seat === "selected"
                      ? "pointer"
                      : "default",
                }}
              >
                {seat === "selected" && (
                  <CheckIcon style={{ color: "black", fontSize: "20px" }} />
                )}
              </Box>
            ))
          )}
        </Box>
      </Box>
    </Box>
  );
};

export default SeatConcert;



import React, { useEffect, useState } from "react";
import { Box, Button, Typography } from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";

const SeatConcert: React.FC = () => {
  const location = useLocation();
  const { price, label, zone } = location.state || {}; // รับข้อมูลโซนที่นั่ง
  const [timeLeft, setTimeLeft] = useState(5 * 60); // 5 นาที
  const [seats, setSeats] = useState<string[][]>([]); // เก็บสถานะที่นั่งแบบ 2 มิติ
  const [selectedSeats, setSelectedSeats] = useState<{ row: number; col: number }[]>([]); // เก็บที่นั่งที่เลือก
  const navigate = useNavigate();

  useEffect(() => {
    if (!zone) {
      console.error("ไม่มีข้อมูลโซน");
      return;
    }

    console.log(`ดึงข้อมูลที่นั่งจาก API: http://localhost:5000/api/seats/${zone.id}`);
    fetch(`http://localhost:5000/api/seats/${zone.id}`)
      .then((response) => response.json())
      .then((data) => {
        console.log("ข้อมูลที่นั่งจากฐานข้อมูล:", data);

        // แปลงข้อมูลให้เป็น grid (2D array)
        const seatGrid: string[][] = [];
        for (let i = 0; i < data.length; i += 10) {
          seatGrid.push(
            data.slice(i, i + 10).map((seat: any) => (seat.is_reserved ? "reserved" : "available"))
          );
        }

        setSeats(seatGrid);
      })
      .catch((error) => {
        console.error("เกิดข้อผิดพลาดในการดึงข้อมูลที่นั่ง:", error);
      });
  }, [zone]);

  // ฟังก์ชันสำหรับเลือกที่นั่ง
  const toggleSeatStatus = (row: number, col: number) => {
    if (seats[row][col] === "reserved") return; // ไม่สามารถเลือกที่นั่งที่ถูกจองแล้ว

    setSeats((prevSeats) => {
      const newSeats = [...prevSeats.map((row) => [...row])]; // สร้างอาร์เรย์ใหม่
      newSeats[row][col] = newSeats[row][col] === "available" ? "selected" : "available";
      return newSeats;
    });

    setSelectedSeats((prevSelected) => {
      const exists = prevSelected.find((seat) => seat.row === row && seat.col === col);
      if (exists) {
        return prevSelected.filter((seat) => seat.row !== row || seat.col !== col);
      } else {
        return [...prevSelected, { row, col }];
      }
    });
  };

  // อัปเดตเวลานับถอยหลัง
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // แปลง price เป็นตัวเลข
  const numericPrice = parseFloat(price?.replace(/[^\d.-]/g, "") || "0");

  // แปลงเวลาเป็น MM:SS
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
  };

  // ไปหน้าชำระเงิน
  const handleBuyTicket = () => {
    navigate("/payment-concert", {
      state: { price, label, selectedSeats },
    });
  };

  return (
    <Box sx={{ display: "flex", flexDirection: "row", padding: "20px", width: "1200px" }}>
      {/* Sidebar ซ้าย */}
      <Box sx={{ width: "400px", marginRight: "20px" }}>
        <Typography variant="h5">รายละเอียดโซน: {label}</Typography>
        <Typography variant="h6" color="red">ราคา: {price} บาท</Typography>

        {/* แสดงที่นั่งที่เลือก */}
        {selectedSeats.length > 0 && (
          <Box sx={{ background: "#fff", padding: "10px", borderRadius: "8px", marginTop: "10px" }}>
            <Typography>ที่นั่งที่เลือก:</Typography>
            <Box sx={{ display: "flex", flexWrap: "wrap", gap: "5px" }}>
              {selectedSeats.map((seat, index) => (
                <Box key={index} sx={{
                  background: "#00FF00", padding: "8px", borderRadius: "5px", color: "#fff",
                }}>
                  {label}{seat.row + 1}-{seat.col + 1}
                </Box>
              ))}
            </Box>
          </Box>
        )}

        {/* ปุ่มซื้อบัตร */}
        <Button
          variant="contained"
          color="error"
          onClick={handleBuyTicket}
          disabled={selectedSeats.length === 0}
          sx={{ marginTop: "20px", width: "100%" }}
        >
          ซื้อบัตร (฿{numericPrice * selectedSeats.length})
        </Button>
      </Box>

      {/* แผนที่ที่นั่ง */}
      <Box sx={{ width: "750px", padding: "20px", background: "#FFF", borderRadius: "20px" }}>
        <Typography variant="h6" color="red">เวลาทำรายการ: {formatTime(timeLeft)}</Typography>

        {/* Grid ที่นั่ง */}
        <Box sx={{ display: "grid", gridTemplateColumns: "repeat(10, 50px)", gap: "5px", marginTop: "20px" }}>
          {seats.map((row, rowIndex) =>
            row.map((seatStatus, colIndex) => (
              <Button
                key={`${rowIndex}-${colIndex}`}
                sx={{
                  backgroundColor:
                    seatStatus === "reserved"
                      ? "#FF6347"
                      : selectedSeats.some((seat) => seat.row === rowIndex && seat.col === colIndex)
                      ? "#00FF00"
                      : "#F0F0F0",
                  width: "50px",
                  height: "50px",
                  color: seatStatus === "reserved" ? "#FFFFFF" : "black",
                  "&:hover": { backgroundColor: seatStatus === "reserved" ? "#FF6347" : "#B0E0E6" },
                }}
                onClick={() => toggleSeatStatus(rowIndex, colIndex)}
              >
                {rowIndex + 1}-{colIndex + 1}
              </Button>
            ))
          )}
        </Box>
      </Box>
    </Box>
  );
};

export default SeatConcert;




const updateSeatsInDatabase = async () => {
  try {
    await Promise.all(
      selectedSeats.map(async (seat) => {
        const response = await fetch("http://localhost:5000/api/update-seat", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            seatId: seat.id, // ใช้ seat.id ที่มาจาก API
            status: 1, // 1 หมายถึงที่นั่งถูกจอง
          }),
        });

        if (!response.ok) {
          throw new Error("เกิดข้อผิดพลาดในการอัปเดตที่นั่ง");
        }
      })
    );

    console.log("ที่นั่งถูกอัปเดตในฐานข้อมูลเรียบร้อย");
  } catch (error) {
    console.error("ข้อผิดพลาดในการอัปเดตที่นั่ง:", error);
    alert("ไม่สามารถอัปเดตที่นั่งในฐานข้อมูลได้");
  }
};


const handleBuyTicket = async () => {
  await updateSeatsInDatabase(); // อัปเดตสถานะที่นั่งก่อน
  navigate("payment-concert", {
    state: {
      price,
      label,
      selectedSeats,
    },
  });
};



/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useEffect, useState } from "react";
import {
  Box,
  Button,
  Checkbox,
  Collapse,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Divider,
  FormControlLabel,
  IconButton,
  MenuItem,
  Select,
  TextField,
  Typography,
} from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import Image from "/src/assets/concert/mastercard.png";
import Image1 from "/src/assets/concert/visa.jpg";
import Image2 from "/src/assets/concert/jcb.png";
import Image3 from "/src/assets/concert/express.png";
import Image4 from "/src/assets/concert/prompt.png";
import Image5 from "/src/assets/concert/qrcode.jpg";
import CloseIcon from "@mui/icons-material/Close";

const PaymentConcert: React.FC = () => {
  const [slip, setSlip] = useState<File | null>(null);
  const location = useLocation();
  const { price, label, selectedSeats } = location.state || {}; // ค่าที่ส่งมาจากหน้า Concert

   useEffect(() => {
      if (!location.state) {
        console.log("ไม่มีข้อมูล state ที่ถูกส่งมา");
      } else {
        console.log("location.state:", location.state);
        console.log("selectedSeats:", selectedSeats);
      }
    }, [location.state, selectedSeats]);
  // แปลงราคาเป็นตัวเลข (เอาเฉพาะตัวเลขออกจากข้อความ)
  const numericPrice = price ? parseFloat(price.replace(/[^\d.-]/g, "")) : 0;

  // ใช้ state ในการควบคุมกลุ่มที่เปิด
  const [openSection, setOpenSection] = useState(null);

  // ฟังก์ชันที่ใช้ในการเปิด/ปิดกลุ่ม
  const toggleSection = (section: any) => {
    // ถ้ากลุ่มที่คลิกเป็นกลุ่มเดิมก็จะปิด, ถ้าไม่ใช่จะเปิดกลุ่มนั้น
    setOpenSection(openSection === section ? null : section);
  };

  const [checked, setChecked] = useState(false);
  const handleCheckboxChange = (event: {
    target: { checked: boolean | ((prevState: boolean) => boolean) };
  }) => {
    setChecked(event.target.checked);
  };


  const [openDialog, setOpenDialog] = useState(false);
  const handleOpenDialog = () => setOpenDialog(true);
  const handleCloseDialog = () => setOpenDialog(false);

  const [openCardDialog, setOpenCardDialog] = useState(false);
  const handleOpenCardDialog = () => setOpenCardDialog(true);
  const handleCloseCardDialog = () => setOpenCardDialog(false);

  const [openPromptPayDialog, setOpenPromptPayDialog] = useState(false);

  const handleOpenPromptPayDialog = () => setOpenPromptPayDialog(true);
  const handleClosePromptPayDialog = () => setOpenPromptPayDialog(false);

  const totalSeatPrice = numericPrice * selectedSeats.length;
  const vatAmount = totalSeatPrice * 0.07;
  const serviceFee = vatAmount * 1.07;
  const totalPrice = totalSeatPrice + vatAmount + serviceFee;

  const [creditCardNumber, setCreditCardNumber] = React.useState("");
  const [cardName, setCardName] = React.useState("");
  const [expirationMonth, setExpirationMonth] = React.useState("");
  const [expirationYear, setExpirationYear] = React.useState("");
  const [cvv, setCvv] = React.useState("");
  const [formValid, setFormValid] = React.useState(false);

  const validateForm = () => {
    if (
      creditCardNumber.trim() &&
      cardName.trim() &&
      expirationMonth &&
      expirationYear &&
      cvv.trim()
    ) {
      setFormValid(true);
    } else {
      setFormValid(false);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setSlip(e.target.files[0]);
    }
  };

  // เรียก validateForm ทุกครั้งที่ข้อมูลเปลี่ยนแปลง
  React.useEffect(() => {
    validateForm();
  }, [creditCardNumber, cardName, expirationMonth, expirationYear, cvv]);

  const navigate = useNavigate();

  return (
    <Box
      p={2}
      mb={8}
      bgcolor="gray.800"
      color="white"
      borderRadius={2}
      boxShadow={3}
      border={1}
      borderColor="gray.700"
      width={970}
      maxHeight="none"
      height={1750}
      sx={{
        background: "linear-gradient(135deg, #EECDA3 0%, #EF629F 100%);",
      }}
    >
      {/* Sidebar ซ้าย */}
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "flex-start",
          width: "940px",
          mr: 2,
        }}
      >
        <Typography
          variant="h5"
          sx={{ fontWeight: "bold", mb: 2, textAlign: "left", color: "black" }}
        >
          ● ข้อมูลผู้ซื้อบัตร
        </Typography>
        <Box
          sx={{
            padding: "20px",
            backgroundColor: "#f5f5f5",
            borderRadius: "8px",
            boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
            display: "flex",
            flexWrap: "wrap",
            gap: "16px",
          }}
        >
          <Box sx={{ flex: "1 1 45%" }}>
            <TextField
              fullWidth
              variant="outlined"
              label="ชื่อ"
              defaultValue="สวย"
              InputProps={{
                style: { borderRadius: "20px", color: "black" }, // ขอบมนและสีข้อความสีขาว
              }}
              InputLabelProps={{
                style: { color: "#a0a0a0" }, // สีของป้ายข้อความ
              }}
              sx={{
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderRadius: "20px",
                  },
                },
              }}
            />
          </Box>
          <Box sx={{ flex: "1 1 45%" }}>
            <TextField
              fullWidth
              variant="outlined"
              label="นามสกุล"
              defaultValue="งาน"
              InputProps={{
                style: { borderRadius: "20px", color: "black" },
              }}
              InputLabelProps={{
                style: { color: "#a0a0a0" },
              }}
              sx={{
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderRadius: "20px",
                  },
                },
              }}
            />
          </Box>
          <Box sx={{ flex: "1 1 45%" }}>
            <TextField
              fullWidth
              variant="outlined"
              label="เบอร์โทรศัพท์"
              defaultValue="0926239547"
              InputProps={{
                style: { borderRadius: "20px", color: "black" },
              }}
              InputLabelProps={{
                style: { color: "#a0a0a0" },
              }}
              sx={{
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderRadius: "20px",
                  },
                },
              }}
            />
          </Box>
          <Box sx={{ flex: "1 1 45%" }}>
            <TextField
              fullWidth
              variant="outlined"
              label="อีเมล"
              defaultValue="onanongmaenthim@gmail.com"
              InputProps={{
                style: { borderRadius: "20px", color: "black" },
              }}
              InputLabelProps={{
                style: { color: "#a0a0a0" },
              }}
              sx={{
                "& .MuiOutlinedInput-root": {
                  "& fieldset": {
                    borderRadius: "20px",
                  },
                },
              }}
            />
          </Box>
        </Box>
      </Box>

      <Typography
        variant="h5"
        sx={{
          fontWeight: "bold",
          mb: 2,
          textAlign: "left",
          marginTop: "15px",
          color: "black",
        }}
      >
        ● สรุปรายการสั่งซื้อ
      </Typography>
      <Box
        sx={{
          width: "940px",
          maxWidth: "none",
          padding: "10px",
          borderRadius: "5px",
          backgroundColor: "#f5f5f5",
          boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
          display: "flex",
          flexDirection: "column",
          alignItems: "left",
          borderBottom: "1px solid #000", // เส้นขีดใต้ข้อความ
          paddingBottom: "5px", // เพิ่มระยะห่างระหว่างข้อความกับเส้นขีด
          flexWrap: "wrap",
          marginTop: "2px",
        }}
      >
        {/* แสดงราคารวม */}
        <Typography variant="h6" sx={{ mb: 1, textAlign: "left" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%",
              marginTop: "15px",
              color: "black",
            }}
          >
            <span>{label}:</span>
            <span>
              {selectedSeats.length > 0
                ? `฿${numericPrice * selectedSeats.length}` // คูณจำนวนที่นั่งกับราคา
                : "กรุณาเลือกที่นั่ง"}
            </span>
          </Box>
        </Typography>

        <Typography
          variant="h6"
          sx={{ mb: 1, textAlign: "left", color: "black" }}
        >
          โซนที่นั่ง: {label}
        </Typography>

        <Typography
          variant="h6"
          sx={{
            mb: 2,
            textAlign: "left",
            borderBottom: "1px solid #000", // เส้นขีดใต้ข้อความ
            paddingBottom: "5px", // เพิ่มระยะห่างระหว่างข้อความกับเส้นขีด
            color: "black",
          }}
        >
          ที่นั่งที่เลือก:{" "}
          {selectedSeats.length > 0
            ? selectedSeats
                .map(
                  (seat: { row: number; col: number }) =>
                    `${label}${seat.row}-${seat.col}`
                )
                .join(" / ") // Joining the seats with a separator (e.g., " / ")
            : "ยังไม่ได้เลือกที่นั่ง"}
        </Typography>

        {/* ราคารวม */}
        <Typography
          variant="h6"
          sx={{ mb: 1, textAlign: "left", color: "black" }}
        >
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%",
            }}
          >
            <span>ราคารวม</span>
            <span>
              {selectedSeats.length > 0
                ? `฿${(numericPrice * selectedSeats.length).toFixed(2)}` // คูณจำนวนที่นั่งกับราคา
                : "กรุณาเลือกที่นั่ง"}
            </span>
          </Box>
        </Typography>

        {/* ค่าบริการ (VAT incl.) */}
        <Typography variant="h6" sx={{ mb: 1, textAlign: "left" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%",
              color: "black",
            }}
          >
            <span>ค่าบริการ (VAT incl.)</span>
            <span>
              {selectedSeats.length > 0
                ? `฿${(numericPrice * selectedSeats.length * 0.07).toFixed(2)}` // คำนวณ VAT 7% จากราคารวม
                : "ค่าบริการ"}
            </span>
          </Box>
        </Typography>
        {/* ค่าธรรมเนียมการชำระเงิน (VAT incl.) */}
        <Typography variant="h6" sx={{ mb: 1, textAlign: "left" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%",
              borderBottom: "1px solid #000", // เส้นขีดใต้ข้อความ
              paddingBottom: "5px", // เพิ่มระยะห่างระหว่างข้อความกับเส้นขีด
              color: "black",
            }}
          >
            <span>ค่าธรรมเนียมการชำระเงิน (VAT incl.)</span>
            <span>
              {selectedSeats.length > 0
                ? `฿${(numericPrice * selectedSeats.length * 0.07 * 1.07) // คำนวณค่าธรรมเนียม 7% บวก VAT 7%
                    .toFixed(2)}`
                : "ค่าธรรมเนียมการชำระเงิน"}
            </span>
          </Box>
        </Typography>
        {/* ราคารวมสุทธิ */}
        <Typography variant="h6" sx={{ mb: 2, textAlign: "left" }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              width: "100%",
              color: "black",
            }}
          >
            <span>ราคารวมสุทธิ</span>
            <span>
              {selectedSeats.length > 0
                ? `฿${(
                    numericPrice * selectedSeats.length + // ราคารวม
                    numericPrice * selectedSeats.length * 0.07 + // ค่าบริการ (VAT)
                    numericPrice * selectedSeats.length * 0.07 * 1.07
                  ) // ค่าธรรมเนียมการชำระเงิน (VAT)
                    .toFixed(2)}`
                : "ราคารวมสุทธิ"}
            </span>
          </Box>
        </Typography>
      </Box>

      <Box
        sx={{
          width: "940px",
          padding: "20px",
          backgroundColor: "#f5f5f5",
          borderRadius: "8px",
          boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
          display: "flex",
          flexWrap: "wrap",
          gap: "16px",
          color: "black",
          marginTop: "5px",
        }}
      >
        <Box sx={{ flex: "1 1 45%" }}>
          <Typography variant="h6" sx={{ textAlign: "left" }}>
            มีรหัสโปรโมชันหรือไม่?
          </Typography>
          <Box sx={{ display: "flex", alignItems: "center", gap: "8px" }}>
            {/* โค้ดส่วนลด */}
            <TextField
              label="โค้ดส่วนลด"
              variant="outlined"
              margin="normal"
              fullWidth
              sx={{
                flex: 1, // ทำให้ฟิลด์ยาวเต็มพื้นที่
                borderRadius: 2,
                "& .MuiOutlinedInput-root": { borderRadius: 20, height: 50 },
              }}
            />
            {/* ปุ่ม */}
            <Button
              variant="contained"
              sx={{
                height: 50,
                borderRadius: 20,
                padding: "0 16px",
                fontWeight: "bold",
                backgroundColor: "gray", // เปลี่ยนสีปุ่ม
                "&:hover": {
                  backgroundColor: "#004d40", // สีปุ่มเมื่อ hover
                },
              }}
            >
              ยืนยัน
            </Button>
          </Box>
        </Box>
      </Box>
      {/* ยอมรับข้อตกลง */}
      <Box
        sx={{
          width: "940px",
          padding: "20px",
          backgroundColor: "#f5f5f5",
          borderRadius: "8px",
          boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
          display: "flex",
          flexWrap: "wrap",
          gap: "16px",
          marginTop: "5px",
          color: "black",
        }}
      >
        <Typography variant="h6" sx={{ textAlign: "left" }}>
          หากท่านได้ชำระค่าสินค้า หรือค่าบริการเรียบร้อยแล้ว
          โดยเราได้ทำการสำรองที่นั่ง หรือสินค้าให้แก่ท่านแล้ว
          ในกรณีที่ท่านมิได้เข้าชมการแสดง หรือมิได้มารับบัตรภายในเวลาที่กำหนด
          เราขอสงวนสิทธิ์ในการคืนเงินให้แก่ท่าน ไม่ว่ากรณีใดก็ตาม
        </Typography>

        <FormControlLabel
          control={
            <Checkbox
              checked={checked}
              onChange={handleCheckboxChange}
              color="success"
              sx={{
                transform: "scale(1.5)", // เพิ่มขนาดของ Checkbox
                marginTop: "8px",
              }}
            />
          }
          label={
            <Box>
              {/* ข้อความพร้อมคำที่สามารถกดได้ */}
              <Typography sx={{ fontSize: "1.25rem", marginTop: "6px" }}>
                ฉันยอมรับ ข้อตกลงเงื่อนไขตามรายละเอียดด้านบน{" "}
                <span
                  style={{
                    color: "red",
                    cursor: "pointer",
                    textDecoration: "underline",
                  }}
                  onClick={handleOpenDialog}
                >
                  และข้อกำหนดการให้บริการ
                </span>
              </Typography>

              {/* Dialog/Modal Popup */}
              <Dialog open={openDialog} onClose={handleCloseDialog}>
                <DialogTitle>ข้อกำหนดการให้บริการ</DialogTitle>
                <DialogContent>
                  <Typography>
                    นี่คือข้อกำหนดการให้บริการของเรา
                    ซึ่งจะมีข้อมูลเกี่ยวกับการใช้งาน และข้อปฏิบัติต่าง ๆ
                    ที่ผู้ใช้ต้องทราบและยอมรับก่อนการใช้งาน
                  </Typography>
                </DialogContent>
                <DialogActions>
                  <Button onClick={handleCloseDialog} color="primary">
                    ปิด
                  </Button>
                </DialogActions>
              </Dialog>
            </Box>
          }
        />
      </Box>
      <Box>
        <Typography
          variant="h5"
          sx={{
            fontWeight: "bold",
            mb: 2,
            textAlign: "left",
            mt: 2,
            color: "black",
          }}
        >
          ● การชำระเงิน
        </Typography>

        {/* ข้อมูลการชำระเงินด้วยบัตรเครดิต */}
        <Box sx={{ borderRadius: 2, overflow: "hidden", width: "940px" }}>
          {/* ส่วนบนที่เป็นสีแดง */}
          <Box sx={{ backgroundColor: "red", color: "white", p: 1 }}>
            <Typography
              variant="h6"
              sx={{ fontWeight: "bold", textAlign: "left" }}
            >
              <IconButton
                onClick={() => toggleSection("card")}
                color="inherit"
                size="large"
              >
                {openSection === "card" ? (
                  <ExpandLessIcon />
                ) : (
                  <ExpandMoreIcon />
                )}
              </IconButton>
              เดบิต/เครดิตการ์ด
            </Typography>
          </Box>

          <Collapse in={openSection === "card"}>
            <Box sx={{ backgroundColor: "white", color: "black", p: 3 }}>
              {/* แสดงรูปภาพ */}
              <Box sx={{ display: "flex", gap: "7px" }}>
                <img
                  src={Image}
                  alt="Image 1"
                  style={{ width: "8%", height: "35px", borderRadius: "8px" }}
                />
                <img
                  src={Image1}
                  alt="Image 2"
                  style={{ width: "8%", height: "35px", borderRadius: "8px" }}
                />
                <img
                  src={Image2}
                  alt="Image 3"
                  style={{ width: "9%", height: "35px", borderRadius: "8px" }}
                />
                <img
                  src={Image3}
                  alt="Image 4"
                  style={{ width: "8%", height: "31px", borderRadius: "8px" }}
                />
              </Box>
              {/* ช่องกรอกหมายเลขบัตรเครดิต */}
              <TextField
                label="หมายเลขบัตรเครดิต"
                fullWidth
                variant="outlined"
                margin="normal"
                sx={{
                  mb: 2,
                  borderRadius: 2,
                  "& .MuiOutlinedInput-root": { borderRadius: 20, height: 56 },
                }}
                value={creditCardNumber}
                onChange={(e) => setCreditCardNumber(e.target.value)}
              />
              {/* ช่องกรอกชื่อบัตรเครดิต */}
              <TextField
                label="ชื่อบัตรเครดิต"
                fullWidth
                variant="outlined"
                margin="normal"
                sx={{
                  mb: 2,
                  borderRadius: 2,
                  "& .MuiOutlinedInput-root": { borderRadius: 20, height: 56 },
                }}
                value={cardName}
                onChange={(e) => setCardName(e.target.value)}
              />
              {/* วันหมดอายุและ CVV */}
              <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
                <Select
                  fullWidth
                  variant="outlined"
                  value={expirationMonth}
                  displayEmpty
                  onChange={(e) => setExpirationMonth(e.target.value)}
                  sx={{
                    borderRadius: 20,
                    height: 56,
                    mt: 2,
                    "& .MuiOutlinedInput-root": { borderRadius: 20 },
                  }}
                >
                  <MenuItem value="" disabled>
                    เดือน
                  </MenuItem>
                  {[...Array(12).keys()].map((month) => (
                    <MenuItem key={month + 1} value={month + 1}>
                      {month + 1}
                    </MenuItem>
                  ))}
                </Select>

                <Select
                  fullWidth
                  variant="outlined"
                  value={expirationYear}
                  displayEmpty
                  onChange={(e) => setExpirationYear(e.target.value)}
                  sx={{
                    borderRadius: 20,
                    mt: 2,
                    height: 56,
                    "& .MuiOutlinedInput-root": { borderRadius: 20 },
                  }}
                >
                  <MenuItem value="" disabled>
                    ปี
                  </MenuItem>
                  {[...Array(10).keys()].map((year) => (
                    <MenuItem key={year + 2024} value={year + 2024}>
                      {year + 2024}
                    </MenuItem>
                  ))}
                </Select>

                <TextField
                  label="CVV"
                  fullWidth
                  variant="outlined"
                  margin="normal"
                  sx={{
                    borderRadius: 20,
                    "& .MuiOutlinedInput-root": {
                      borderRadius: 20,
                      height: 56,
                    },
                  }}
                  value={cvv}
                  onChange={(e) => setCvv(e.target.value)}
                />
              </Box>
              {/* ข้อมูลการชำระเงิน */}
              <Typography
                variant="h6"
                sx={{ mt: 2, color: "black", textAlign: "left", mb: 2 }}
              >
                ข้อมูลการชำระจะปรากฎชื่อ OPN "INTERGATER"
              </Typography>
              <Typography
                variant="h6"
                sx={{ color: "black", textAlign: "left" }}
              >
                เรารองรับการชำระเงินผ่านบัตรเดบิตของ KTB, Bangkok Bank, SCB,
                KBANK, Bank of Ayudhya, Thanachart Bank รองรับบัตรเครดิต Visa,
                Mastercard และ American Express
              </Typography>
              <Button
                variant="contained"
                onClick={handleOpenCardDialog}
                sx={{
                  marginTop: 2,
                  borderRadius: 20,
                  backgroundColor: formValid ? "red" : "gray",
                  width: 450,
                  height: 50,
                  color: "white",
                  cursor: formValid ? "pointer" : "not-allowed",
                  fontSize: "20px",
                  "&:hover": {
                    backgroundColor: formValid ? "#c40d19" : "gray",
                  },
                }}
                disabled={!formValid}
              >
                ยืนยันการสั่งซื้อ
              </Button>
              {/* ชำระเงินเดบิต Confirmation Dialog */}
              <Dialog
                open={openCardDialog}
                onClose={handleCloseCardDialog}
                maxWidth="sm"
                fullWidth
              >
                <DialogTitle
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    backgroundColor: "red",
                  }}
                >
                  <Typography variant="h5" sx={{ color: "white" }}>
                    คุณแน่ใจหรือไม่ว่าจะยืนยันการสั่งซื้อ!!!
                  </Typography>
                </DialogTitle>

                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    padding: "20px",
                  }}
                >
                  <Button
                    variant="contained"
                    sx={{
                      borderRadius: 20,
                      backgroundColor: "green",
                      width: "48%",
                      height: 50,
                      fontSize: "18px",
                      "&:hover": {
                        backgroundColor: "#c40d19",
                      },
                    }}
                    onClick={() =>
                      navigate("/concert/ticket-concet", {
                        state: { price, label, selectedSeats },
                      })
                    }
                  >
                    ยืนยัน
                  </Button>

                  <Button
                    variant="outlined"
                    sx={{
                      borderRadius: 20,
                      border: "1px solid red",
                      color: "red",
                      width: "48%",
                      height: 50,
                      fontSize: "18px",
                      "&:hover": {
                        backgroundColor: "rgba(255, 0, 0, 0.1)",
                        border: "1px solid red",
                      },
                    }}
                    onClick={handleCloseCardDialog}
                  >
                    ยกเลิก
                  </Button>
                </div>
              </Dialog>
            </Box>
          </Collapse>
        </Box>

        {/* ข้อมูลการชำระเงินด้วยพร้อมเพย์ */}
        <Box
          sx={{
            borderRadius: 2,
            overflow: "hidden",
            marginTop: "15px",
            width: "940px",
          }}
        >
          {/* ส่วนบนที่เป็นสีแดง */}
          <Box sx={{ backgroundColor: "red", color: "white", p: 1 }}>
            <Typography
              variant="h6"
              sx={{ fontWeight: "bold", textAlign: "left" }}
            >
              <IconButton
                onClick={() => toggleSection("promptPay")}
                color="inherit"
                size="large"
              >
                {openSection === "promptPay" ? (
                  <ExpandLessIcon />
                ) : (
                  <ExpandMoreIcon />
                )}
              </IconButton>
              พร้อมเพย์
            </Typography>
          </Box>

          <Collapse in={openSection === "promptPay"}>
            <Box sx={{ backgroundColor: "white", color: "black", p: 3 }}>
              <Typography
                variant="h6"
                sx={{ mb: 2, color: "black", textAlign: "left" }}
              >
                ชำระผ่านช่องทางพร้อมเพย์
              </Typography>

              {/* แสดงรูปภาพ */}
              <Box sx={{ display: "flex", gap: "7px" }}>
                <img
                  src={Image4}
                  alt="Image 1"
                  style={{ width: "50%", height: "auto", borderRadius: "8px" }}
                />
              </Box>

              {/* ข้อมูลการชำระเงิน */}
              <Typography
                variant="h6"
                sx={{ mt: 2, color: "black", textAlign: "left" }}
              >
                ขั้นตอนการชำระเงิน
              </Typography>
              <Typography
                variant="h6"
                sx={{ color: "black", textAlign: "left" }}
              >
                หลังจากคลิกยืนยันการชำระเงิน ระบบจะสร้าง QR Code สำหรับชำระเงิน
                ท่านสามารถสแกน QR Code เพื่อชำระเงินได้ทันที
              </Typography>
              <Button
                variant="contained"
                onClick={handleOpenPromptPayDialog}
                sx={{
                  marginTop: 2,
                  borderRadius: 20,
                  backgroundColor: "red",
                  width: 450,
                  height: 50,
                  color: "white",
                  fontSize: "20px",
                  "&:hover": {
                    backgroundColor: "#c40d19",
                    border: "1px solid white",
                  },
                }}
              >
                แสดง QR Code
              </Button>

              {/* Payment Confirmation Dialog */}
              <Dialog
  open={openPromptPayDialog}
  onClose={handleClosePromptPayDialog}
  maxWidth="sm"
  fullWidth
>
  <DialogTitle
    sx={{
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      backgroundColor: "red",
    }}
  >
    <Typography variant="h6" sx={{ color: "white" }}>
      รอการชำระเงินจากคุณ
    </Typography>
    <IconButton onClick={handleClosePromptPayDialog}>
      <CloseIcon />
    </IconButton>
  </DialogTitle>

  <DialogContent sx={{ backgroundColor: "white" }}>
    <Box sx={{ padding: 2, color: "#151515" }}>
      <Typography
        variant="h4"
        align="center"
        sx={{ fontWeight: "bold" }}
      >
        PromptPay QR Code
      </Typography>

      <img
        src={Image5}
        alt="Event Thumbnail"
        style={{
          width: "400px",
          borderRadius: "16px",
          marginTop: "20px",
          display: "block",
          margin: "0 auto",
        }}
      />
      <Typography
        variant="h6"
        align="center"
        sx={{ fontWeight: "bold" }}
      >
        SCAN QR CODE
      </Typography>
      <Typography
        variant="h5"
        align="center"
        sx={{ color: "red", fontWeight: "bold" }}
      >
        ฿{totalPrice.toFixed(2)}
      </Typography>
      <Divider sx={{ backgroundColor: "gray" }} />

      <Box sx={{ mt: 2 }}>
        <Typography variant="h5" sx={{ mb: 1, color: "black" }}>
          อัปโหลดสลิปการโอนเงิน:
        </Typography>
        <input
          type="file"
          accept="image/*"
          onChange={handleFileChange}
          style={{
            marginBottom: "10px",
            fontSize: "17px",
            color: "red",
          }}
        />
        {slip && (
          <Box sx={{ mt: 2 }}>
            <Typography variant="body1">
              สลิปที่แนบมา:
            </Typography>
            <img
              src={URL.createObjectURL(slip)}
              alt="สลิปการโอนเงิน"
              style={{
                maxWidth: "100%",
                height: "auto",
                border: "1px solid #ccc",
                borderRadius: 8,
              }}
            />
          </Box>
        )}
      </Box>

      <Button
        variant="contained"
        sx={{
          marginTop: 2,
          borderRadius: 20,
          backgroundColor: "red",
          width: "100%",
          height: 50,
          fontSize: "20px",
          "&:hover": {
            backgroundColor: "#c40d19",
            border: "1px solid white",
          },
        }}
        onClick={() => {
          if (!slip) {
            // ถ้ายังไม่ได้แนบสลิปจะแจ้งเตือน
            alert("กรุณาแนบรูปสลิปการโอนเงินก่อน!");
            return;
          }
          // ถ้ามีการแนบสลิปแล้ว ค่อยไปยังหน้าใบเสร็จ
          navigate("/concert/ticket-concet", {
            state: { price, label, selectedSeats },
          });
        }}
      >
        กดเพื่อแสดงหน้าใบเสร็จ
      </Button>
    </Box>
  </DialogContent>
</Dialog>

            </Box>
          </Collapse>
        </Box>
      </Box>
    </Box>
  );
};

export default PaymentConcert;





























